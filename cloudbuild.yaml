steps:

  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - build
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:latest'
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$COMMIT_SHA'
      - '.'

  # Step 2: Push the `latest` tag to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - push
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:latest'

  # Step 3: Push the commit-specific tag to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - push
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$COMMIT_SHA'
  images:
    - 'gcr.io/$PROJECT_ID/dev-zulip'

  # # Step 4: Authenticate kubectl with GKE cluster
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   args:
  #     - 'container'
  #     - 'clusters'
  #     - 'get-credentials'
  #     - '${_GKE_CLUSTER}'
  #     - '--zone=${_GKE_ZONE}'
  #     - '--project=$PROJECT_ID'

  # # Step 5: Deploy the new Docker image to GKE
  # - name: 'gcr.io/cloud-builders/kubectl'
  #   env:
  #     - 'CLOUDSDK_COMPUTE_ZONE=${_GKE_ZONE}'
  #     - 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER}'
  #   args:
  #     - 'apply'
  #     - '-f'
  #     - 'kubernetes/test'
  #     # - '--validate=false'

  # # Step 6: Verify nodes in the GKE cluster
  # - name: 'gcr.io/cloud-builders/kubectl'
  #   env:
  #     - 'CLOUDSDK_COMPUTE_ZONE=${_GKE_ZONE}'
  #     - 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER}'
  #   args:
  #     - 'get'
  #     - 'nodes'

substitutions:
  _GKE_CLUSTER: 'dev'
  _GKE_ZONE: 'us-central1'
  _IMAGE_NAME: 'dev-zulip'

logsBucket: gs://dev-zulip-cloudbuild-log
# timeout: '1200s'
# Ensure the Cloud Build service account has appropriate roles:
# - roles/container.developer (for GKE access)
# - roles/storage.admin (for GCR access)


